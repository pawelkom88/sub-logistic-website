---
import { Picture } from "astro:assets";
import heroImage from "../../assets/images/port-full-of-containers.jpeg";
import heroImageMobile from "../../assets/images/port-full-of-containers_mobile.jpg";
import "./hero.css";
import { splitString, type SelectedTranslation, getCountryCode } from "../../utils/utils";

interface Props {
  hero: SelectedTranslation["hero"];
}

const { hero } = Astro.props;
const formattedHero = splitString(hero.title);
const formattedHeroAfter = splitString(hero.title, 1);

const lang = getCountryCode(Astro.url.pathname);
const quoteSlugMap = {
  en: "/get-quote",
  pl: "/uzyskaj-wycene",
  de: "/angebot-anfordern",
} as const;
const quoteHref = `/${lang}${quoteSlugMap[lang]}`;

// Offer/Services localized slug and text
const offerSlugMap = {
  en: "/services",
  pl: "/oferta",
  de: "/leistungen",
} as const;
const offerTextMap = {
  en: "Services",
  pl: "Oferta",
  de: "Leistungen",
} as const;
const offerHref = `/${lang}${offerSlugMap[lang]}`;
const offerText = offerTextMap[lang];
const heroAltMap = {
  en: "Lorry driving on a road between forest",
  de: "Lastwagen fährt auf einer Straße durch den Wald",
  pl: "Ciężarówka jadąca drogą przez las",
} as const;
---

<section id="hero-219">
  <div class="cs-container">
    <h1 class="cs-title">
      {formattedHero}
      {formattedHeroAfter}
    </h1>
    <p class="cs-text">
      {hero.body}
    </p>
    <!--<button type="button" class="cs-button-solid transport-offer-btn"-->
    <!--  >{hero.button}</button-->
    <!--&gt;-->
    <a href={quoteHref} class="cs-button-solid transport-offer-btn">{hero.button}</a>
    <a href={offerHref} class="cs-button-offer" style="margin-left: 0.75rem">{offerText}</a>
  </div>
  <Picture
    src={heroImage}
    formats={["avif", "webp"]}
    class="cs-background"
    alt={heroAltMap[lang]}
    loading="eager"
    decoding="async"
    fetchpriority="high"
    sizes="100vw"
  />
  <Picture
    src={heroImageMobile}
    formats={["avif", "webp"]}
    class="cs-background-mobile"
    alt={heroAltMap[lang]}
    loading="eager"
    decoding="async"
    fetchpriority="high"
    sizes="100vw"
  />
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize UI Elements
    const ui = {
      transportOfferBtn: document.querySelector('.transport-offer-btn'),
      dialog: document.querySelector('#cs-dialog'),
      closeButton: document.querySelector('.close-btn'),
      nextButton: document.querySelector('.next-btn'),
      prevButton: document.querySelector('.prev-btn'), // Back button
      dialogContent: document.querySelector('.cs-dialog-content'),
      form: document.querySelector('.cs-form'),
      steps: document.querySelectorAll('.cs-stepper li'),
      formContainer: document.querySelector('.form-container'),
      confirmationContainer: document.querySelector('.confirmation-container'),
      confirmationCloseBtn: document.querySelector('.confirmation-container .close-btn'),
    };

    let currentStep = 1;

    // Guard: if required elements are not present, safely exit to avoid errors
    const requiredPresent = [
      ui.transportOfferBtn,
      ui.dialog,
      ui.closeButton,
      ui.nextButton,
      ui.prevButton,
      ui.dialogContent,
      ui.form,
      ui.formContainer,
    ].every(Boolean);

    if (!requiredPresent) return;

    // Initial Setup
    ui.prevButton.style.display = 'none';

    // Event Listeners
    ui.transportOfferBtn.addEventListener('click', () =>
      openDialogWithTransition(ui.dialog)
    );
    ui.closeButton.addEventListener('click', () =>
      closeDialogWithTransition(ui.dialog)
    );
    ui.nextButton.addEventListener('click', handleNextStep);
    ui.prevButton.addEventListener('click', handlePrevStep);
    if (ui.confirmationCloseBtn) {
      ui.confirmationCloseBtn.addEventListener('click', () => {
        closeDialogWithTransition(ui.dialog);
      });
    }

  function handleNextStep() {
    if (currentStep < 3) {
      currentStep++;
      updateStepperUI();
    }
  }

  function handlePrevStep() {
    if (currentStep > 1) {
      currentStep--;
      updateStepperUI();
    }
  }

  function updateStepperUI() {
    ui.prevButton.style.display = currentStep === 2 ? "block" : "none";
    ui.nextButton.style.display = currentStep === 1 ? "block" : "none";
    updateActiveStepIndicator();
    toggleFormVisibility(currentStep);
  }

  function updateActiveStepIndicator() {
    ui.steps.forEach((step, index) => {
      step.classList.toggle("active", index + 1 === currentStep);
    });
  }

  function toggleFormVisibility(currentStep) {
    // Hide all containers first
    ui.dialogContent.style.display = "none";
    ui.formContainer.style.display = "none";
    if (ui.confirmationContainer) {
      ui.confirmationContainer.style.display = "none";
    }

    // Show the current step
    if (currentStep === 1) {
      ui.dialogContent.style.display = "block";
      ui.nextButton.style.display = "block";
      ui.prevButton.style.display = "none";
    } else if (currentStep === 2) {
      ui.formContainer.style.display = "block";
      ui.nextButton.style.display = "none";
      ui.prevButton.style.display = "block";
    } else if (currentStep === 3) {
      if (ui.confirmationContainer) {
        ui.confirmationContainer.style.display = "block";
      }
      ui.prevButton.style.display = "none";
      ui.nextButton.style.display = "none";
    }

    updateActiveStepIndicator();
  }

  function closeDialogWithDelayedTransition(dialog) {
    setTimeout(() => {
      dialog.close();
    }, 300);
  }

  function closeDialogWithTransition(dialog) {
    dialog.classList.add("closed-dialog");
    dialog.classList.remove("opened-dialog");
    closeDialogWithDelayedTransition(dialog);
  }

  function openDialogWithTransition(dialog) {
    dialog.showModal();
    dialog.classList.add("opened-dialog");
    dialog.classList.remove("closed-dialog");
    // Always start at step 1 when opening
    currentStep = 1;
    updateStepperUI();
  }

    // Handle form submission success event
    window.addEventListener('submitSuccess', () => {
      currentStep = 3;
      updateStepperUI();
    });
  });
</script>
