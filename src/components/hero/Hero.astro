---
import { Picture } from "astro:assets";
import heroImage from "../../assets/images/port-full-of-containers.jpeg";
import "./hero.css";
import JobForm from "../job-form/JobForm.astro";
import { splitString, type SelectedTranslation } from "../../utils/utils";

interface Props {
  hero: SelectedTranslation["hero"];
  jobForm: SelectedTranslation["jobForm"];
  dialog: SelectedTranslation["dialog"];
}

const { hero, jobForm, dialog } = Astro.props;
const formattedHero = splitString(hero.title);
const formattedHeroAfter = splitString(hero.title, 1);
---

<section id="hero-219">
  <div class="cs-container">
    <h1 class="cs-title">
      {formattedHero}{"-"}
      <br />
      {formattedHeroAfter}
    </h1>
    <p class="cs-text">
      {hero.body}
    </p>
    <button type="button" class="cs-button-solid transport-offer-btn"
      >{hero.button}</button
    >
  </div>
  <Picture
    src={heroImage}
    formats={["avif", "webp"]}
    class="cs-background"
    alt="lorry driving on a road between forest"
    loading="eager"
  />
  <!-- new route !!! -->
  <dialog id="cs-dialog">
    <button
      type="button"
      autofocus
      class="close-btn"
      aria-label={dialog.ariaClose}>{dialog.close}</button
    >
    <ol class="cs-stepper">
      {dialog.steps.map((step, index) => (
        <li class={index === 0 ? "active" : ""}>{step}</li>
      ))}
    </ol>
    <!-- Step 1: Introduction -->
    <div class="cs-dialog-content" style="display: block;">
      <h1 class="cs-dialog-title">
        {dialog.title}
      </h1>
      {dialog.text.map((paragraph) => (
        <p class="cs-dialog-text">
          {paragraph}
        </p>
      ))}
    </div>

    <!-- Step 2: Job Form -->
    <div class="form-container" style="display: none;">
      <JobForm jobForm={jobForm} />
      <button type="button" class="prev-btn">{dialog.back}</button>
    </div>

    <!-- Step 3: Confirmation -->
    <div class="confirmation-container" style="display: none;">
      <h1 class="cs-dialog-title">{dialog.steps[2]}</h1>
      <p>{dialog.confirmationMessage}</p>
      <button type="button" class="close-btn">{dialog.close}</button>
    </div>

    <!-- Controls -->
    <button type="button" class="next-btn"
    >{dialog.next}</button>
  </dialog>
  <div class="overlay"></div>
</section>

<script>
  // Initialize UI Elements
  const ui = {
    transportOfferBtn: document.querySelector(".transport-offer-btn"),
    dialog: document.querySelector("#cs-dialog"),
    closeButton: document.querySelector(".close-btn"),
    nextButton: document.querySelector(".next-btn"),
    prevButton: document.querySelector(".prev-btn"), // Now selects the new Back button
    dialogContent: document.querySelector(".cs-dialog-content"),
    form: document.querySelector(".cs-form"),
    steps: document.querySelectorAll(".cs-stepper li"),
    formContainer: document.querySelector(".form-container"),
    confirmationContainer: document.querySelector(".confirmation-container"),
    confirmationCloseBtn: document.querySelector(".confirmation-container .close-btn"),
  };

  let currentStep = 1;

  // Initial Setup
  ui.prevButton.style.display = "none";

  // Event Listeners
  ui.transportOfferBtn.addEventListener("click", () =>
    openDialogWithTransition(ui.dialog),
  );
  ui.closeButton.addEventListener("click", () =>
    closeDialogWithTransition(ui.dialog),
  );
  ui.nextButton.addEventListener("click", handleNextStep);
  ui.prevButton.addEventListener("click", handlePrevStep);
  if (ui.confirmationCloseBtn) {
    ui.confirmationCloseBtn.addEventListener("click", () => {
      closeDialogWithTransition(ui.dialog);
    });
  }

  function handleNextStep() {
    if (currentStep < 3) {
      currentStep++;
      updateStepperUI();
    }
  }

  function handlePrevStep() {
    if (currentStep > 1) {
      currentStep--;
      updateStepperUI();
    }
  }

  function updateStepperUI() {
    ui.prevButton.style.display = currentStep === 2 ? "block" : "none";
    ui.nextButton.style.display = currentStep === 1 ? "block" : "none";
    updateActiveStepIndicator();
    toggleFormVisibility(currentStep);
  }

  function updateActiveStepIndicator() {
    ui.steps.forEach((step, index) => {
      step.classList.toggle("active", index + 1 === currentStep);
    });
  }

  function toggleFormVisibility(currentStep) {
    // Hide all containers first
    ui.dialogContent.style.display = "none";
    ui.formContainer.style.display = "none";
    if (ui.confirmationContainer) {
      ui.confirmationContainer.style.display = "none";
    }
    
    // Show the current step
    if (currentStep === 1) {
      ui.dialogContent.style.display = "block";
      ui.nextButton.style.display = "block";
      ui.prevButton.style.display = "none";
    } else if (currentStep === 2) {
      ui.formContainer.style.display = "block";
      ui.nextButton.style.display = "none";
      ui.prevButton.style.display = "block";
    } else if (currentStep === 3) {
      if (ui.confirmationContainer) {
        ui.confirmationContainer.style.display = "block";
      }
      ui.prevButton.style.display = "none";
      ui.nextButton.style.display = "none";
    }

    updateActiveStepIndicator();
  }

  function closeDialogWithDelayedTransition(dialog) {
    setTimeout(() => {
      dialog.close();
    }, 300);
  }

  function closeDialogWithTransition(dialog) {
    dialog.classList.add("closed-dialog");
    dialog.classList.remove("opened-dialog");
    closeDialogWithDelayedTransition(dialog);
  }

  function openDialogWithTransition(dialog) {
    dialog.showModal();
    dialog.classList.add("opened-dialog");
    dialog.classList.remove("closed-dialog");
    // Always start at step 1 when opening
    currentStep = 1;
    updateStepperUI();
  }
  
  // Handle form submission success event
  window.addEventListener('submitSuccess', () => {
    currentStep = 3;
    updateStepperUI();
  });
</script>
