---
import "./jobform.css";
import { SelectedTranslation, getCountryCode } from "../../utils/utils";

interface Props {
  jobForm: SelectedTranslation["jobForm"];
}

const { jobForm } = Astro.props;
const lang = getCountryCode(Astro.url.pathname);
---

<form
  class="cs-form"
  id="contact-569"
  name="Job Form"
  action="https://api.web3forms.com/submit"
  method="POST"
  novalidate
>
  <input
    aria-hidden="true"
    type="hidden"
    name="access_key"
    value="e63617a1-6b8c-4a8f-adf8-03aba92d5110"
  />
  <input type="hidden" name="from_name" value="Zapytanie o wycene" />
  <input
    aria-hidden="true"
    type="hidden"
    name="subject"
    value={jobForm.subject}
  />
  <input
    aria-hidden="true"
    type="checkbox"
    name="botcheck"
    style="display: none;"
  />
  <div class="cs-field-wrapper">
    <label for="name-569" class="cs-label">{jobForm.fields.name.label}</label>
    <input
      autocomplete="name"
      class="cs-input"
      type="text"
      id="name-569"
      name="name"
      placeholder={jobForm.fields.name.placeholder}
      aria-describedby="name-error-569"
      aria-required="true"
    />
    <span id="name-error-569" class="cs-error" role="alert"></span>
  </div>
  <div class="cs-field-wrapper">
    <label for="phone-569" class="cs-label">{jobForm.fields.phone.label}</label>
    <input
      autocomplete="tel"
      class="cs-input"
      type="tel"
      id="phone-569"
      name="phone"
      placeholder={jobForm.fields.phone.placeholder}
      aria-describedby="phone-error-569"
      aria-required="true"
    />
    <span id="phone-error-569" class="cs-error" role="alert"></span>
  </div>

  <div class="cs-field-wrapper">
    <label for="email-569" class="cs-label">{jobForm.fields.email.label}</label>
    <input
      autocomplete="email"
      class="cs-input"
      type="email"
      id="email-569"
      name="email"
      placeholder={jobForm.fields.email.placeholder}
      aria-describedby="email-error-569"
      aria-required="true"
    />
    <span id="email-error-569" class="cs-error" role="alert"></span>
  </div>

  <div class="cs-field-wrapper">
    <label for="waga-towaru" class="cs-label"
      >{jobForm.fields.weight.label}</label
    >
    <input
      class="cs-input"
      type="number"
      id="waga-towaru"
      name="Waga towarów do przewiezienia"
      placeholder={jobForm.fields.weight.placeholder}
      min="1"
      step="0.1"
      aria-describedby="weight-error-569"
      aria-required="true"
    />
    <span id="weight-error-569" class="cs-error" role="alert"></span>
  </div>

  <div class="cs-field-wrapper">
    <label for="date-load" class="cs-label">{jobForm.fields.loadingDate}</label>
    <input
      class="cs-input"
      type="date"
      id="date-load"
      name="Data załadunku"
      aria-describedby="date-load-error-569"
      aria-required="true"
    />
    <span id="date-load-error-569" class="cs-error" role="alert"></span>
  </div>

  <div class="cs-field-wrapper">
    <label for="date-unload" class="cs-label"
      >{jobForm.fields.unloadingDate}</label
    >
    <input
      class="cs-input"
      type="date"
      id="date-unload"
      name="Data rozładunku"
      aria-describedby="date-unload-error-569"
      aria-required="true"
    />
    <span id="date-unload-error-569" class="cs-error" role="alert"></span>
  </div>

  <div class="cs-field-wrapper">
    <label for="loading-address-569" class="cs-label"
      >{jobForm.fields.loadingAddress.label}</label
    >
    <input
      class="cs-input"
      type="text"
      id="loading-address-569"
      name="Adres załadunku"
      placeholder={jobForm.fields.loadingAddress.placeholder}
      aria-describedby="loading-address-error-569"
      aria-required="true"
    />
    <span id="loading-address-error-569" class="cs-error" role="alert"></span>
  </div>

  <div class="cs-field-wrapper">
    <label for="unloading-address-569" class="cs-label"
      >{jobForm.fields.unloadingAddress.label}</label
    >
    <input
      class="cs-input"
      type="text"
      id="unloading-address-569"
      name="Adres rozładunku"
      placeholder={jobForm.fields.unloadingAddress.placeholder}
      aria-describedby="unloading-address-error-569"
      aria-required="true"
    />
    <span id="unloading-address-error-569" class="cs-error" role="alert"></span>
  </div>

  <div class="cs-textarea-column cs-field-wrapper">
    <label for="message-569" class="cs-label cs-message"
      >{jobForm.fields.goodsDescription}</label
    >
    <textarea
      class="cs-input cs-textarea"
      name="Opis towarów"
      id="message-569"
      placeholder="Describe your goods"
      aria-describedby="message-error-569"
      aria-required="true"></textarea>
    <span id="message-error-569" class="cs-error" role="alert"></span>
  </div>
  <div class="cs-captcha-button-wrapper">
  <div
    class="h-captcha"
    data-captcha="true"
    data-lang={lang}
    data-size="compact"
  >
  </div>
  <br />
  <button class="submit-btn" type="submit">{jobForm.submitBtn}</button>
  </div>
  <div class="lds-spinner"></div>

  <div class="success-component" style="display: none;">
    Wiadomość została wysłana pomyślnie!
  </div>
  <div class="error-component" style="display: none;">
    Weryfikacja hCaptcha jest wymagana, aby zapewnić bezpieczeństwo. Prosimy o
    jej zaznaczenie.
  </div>
</form>

<script define:vars={{ errors: jobForm.errors, lang }}>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("contact-569");
    const nameInput = document.getElementById("name-569");
    const phoneInput = document.getElementById("phone-569");
    const emailInput = document.getElementById("email-569");
    const weightInput = document.getElementById("waga-towaru");
    const loadDateInput = document.getElementById("date-load");
    const unloadDateInput = document.getElementById("date-unload");
    const loadAddressInput = document.getElementById("loading-address-569");
    const unloadAddressInput = document.getElementById("unloading-address-569");
    const goodsDescriptionInput = document.getElementById("message-569");
    // const hcaptcha = document.getElementById("anchor-wr");
    // const dialog =  document.querySelector("#cs-dialog")

    if (!form) {
      console.error("Form not found!");
      return;
    }

    // hcaptcha.addEventListener("click", (event) => {
    //   dialog.close()
    // })

    const spinner = document.querySelector(".lds-spinner");
    const successComponent = document.querySelector(".success-component");
    const errorComponent = document.querySelector(".error-component");
    const submitButton = document.querySelector(".submit-btn");

    spinner.style.display = "none";
    successComponent.style.display = "none";
    errorComponent.style.display = "none";

    // Initialize date inputs with today as minimum
    const todayStr = new Date().toISOString().split("T")[0];
    if (loadDateInput) loadDateInput.min = todayStr;
    if (unloadDateInput) unloadDateInput.min = todayStr;

    function validateEmpty(input, errorId, errorMessage) {
      const errorElement = document.getElementById(errorId);
      if (!errorElement) return false;

      if (input.value.trim() === "") {
        input.classList.add("invalid");
        errorElement.textContent = errorMessage;
        return false;
      }
      return true;
    }

    function validatePhone(input, errorId, errorMessage) {
      const errorElement = document.getElementById(errorId);
      if (!errorElement) return false;

      const phoneValue = input.value.trim();
      // Basic phone validation: must have at least 7 digits, can include +, -, (), spaces
      const phoneRegex =
        /^[\+]?[(]?[0-9]{1,4}[)]?[-\s\.]?[(]?[0-9]{1,4}[)]?[-\s\.]?[0-9]{1,4}[-\s\.]?[0-9]{1,4}$/;

      if (phoneValue === "") {
        input.classList.add("invalid");
        errorElement.textContent = errorMessage;
        return false;
      }

      if (!phoneRegex.test(phoneValue)) {
        input.classList.add("invalid");
        errorElement.textContent = errors.phoneInvalid;
        return false;
      }
      return true;
    }

    function validateEmail(input, errorId, errorMessage) {
      const errorElement = document.getElementById(errorId);
      if (!errorElement) return false;

      const emailValue = input.value.trim();
      // Simple email validation
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

      if (emailValue === "") {
        input.classList.add("invalid");
        errorElement.textContent = errorMessage;
        return false;
      }

      if (!emailRegex.test(emailValue)) {
        input.classList.add("invalid");
        errorElement.textContent = errors.emailInvalid;
        return false;
      }
      return true;
    }

    function validateWeight(input, errorId, errorMessage) {
      const errorElement = document.getElementById(errorId);
      if (!errorElement) return false;

      const weightValue = parseFloat(input.value);

      if (isNaN(weightValue) || weightValue < 1) {
        input.classList.add("invalid");
        errorElement.textContent = errorMessage;
        return false;
      }
      return true;
    }

    function validateDate(input, errorId, errorMessage) {
      const errorElement = document.getElementById(errorId);
      const todaysDate = new Date();
      const today = todaysDate.toISOString().split("T")[0];

      if (!errorElement) return false;

      if (!input.value) {
        input.classList.add("invalid");
        errorElement.textContent = errorMessage;
        return false;
      }

      if (input.value < today) {
        input.classList.add("invalid");
        errorElement.textContent = "Data nie może być z przeszłości";
        return false;
      }

      return true;
    }

    // Ensure loading date is not later than unloading date
    function validateDateOrder(loadInput, unloadInput) {
      const loadVal = loadInput?.value;
      const unloadVal = unloadInput?.value;
      const loadErr = document.getElementById("date-load-error-569");
      const unloadErr = document.getElementById("date-unload-error-569");

      if (!loadInput || !unloadInput || !loadErr || !unloadErr) return true;

      // Only check when both dates are present
      if (!loadVal || !unloadVal) return true;

      const isOrderValid = loadVal <= unloadVal;

      if (!isOrderValid) {
        const orderMsg =
          lang === "pl"
            ? "Data załadunku nie może być późniejsza niż data rozładunku"
            : lang === "de"
            ? "Das Ladedatum darf nicht nach dem Entladedatum liegen"
            : "Loading date cannot be later than unloading date";

        loadInput.classList.add("invalid");
        unloadInput.classList.add("invalid");
        loadErr.textContent = orderMsg;
        unloadErr.textContent = orderMsg;
        return false;
      }

      // Clear errors when order is valid
      loadInput.classList.remove("invalid");
      unloadInput.classList.remove("invalid");
      loadErr.textContent = "";
      unloadErr.textContent = "";
      return true;
    }

    // Keep date fields constrained relative to each other
    function setDateConstraints() {
      if (loadDateInput && unloadDateInput) {
        if (loadDateInput.value) {
          unloadDateInput.min = loadDateInput.value;
        }
        if (unloadDateInput.value) {
          loadDateInput.max = unloadDateInput.value;
        } else {
          loadDateInput.removeAttribute("max");
        }
      }
    }

    function clearError(input, errorId) {
      const errorElement = document.getElementById(errorId);
      if (errorElement) {
        input.classList.remove("invalid");
        errorElement.textContent = "";
      }
    }

    // Hide any global banners when user starts editing or before a new submit
    function hideGlobalMessages() {
      if (successComponent) successComponent.style.display = "none";
      if (errorComponent) errorComponent.style.display = "none";
    }

    if (nameInput)
      nameInput.addEventListener("input", () => {
        hideGlobalMessages();
        clearError(nameInput, "name-error-569");
      });
    if (phoneInput)
      phoneInput.addEventListener("input", () => {
        hideGlobalMessages();
        clearError(phoneInput, "phone-error-569");
      });
    if (emailInput)
      emailInput.addEventListener("input", () => {
        hideGlobalMessages();
        clearError(emailInput, "email-error-569");
      });
    if (weightInput)
      weightInput.addEventListener("input", () => {
        hideGlobalMessages();
        clearError(weightInput, "weight-error-569");
      });
    if (loadDateInput)
      loadDateInput.addEventListener("input", () => {
        hideGlobalMessages();
        setDateConstraints();
        clearError(loadDateInput, "date-load-error-569");
        clearError(unloadDateInput, "date-unload-error-569");
        validateDateOrder(loadDateInput, unloadDateInput);
      });
    if (unloadDateInput)
      unloadDateInput.addEventListener("input", () => {
        hideGlobalMessages();
        setDateConstraints();
        clearError(unloadDateInput, "date-unload-error-569");
        clearError(loadDateInput, "date-load-error-569");
        validateDateOrder(loadDateInput, unloadDateInput);
      });
    if (loadAddressInput)
      loadAddressInput.addEventListener("input", () => {
        hideGlobalMessages();
        clearError(loadAddressInput, "loading-address-error-569");
      });
    if (unloadAddressInput)
      unloadAddressInput.addEventListener("input", () => {
        hideGlobalMessages();
        clearError(unloadAddressInput, "unloading-address-error-569");
      });
    if (goodsDescriptionInput)
      goodsDescriptionInput.addEventListener("input", () => {
        hideGlobalMessages();
        clearError(goodsDescriptionInput, "message-error-569");
      });

    form.addEventListener("submit", (e) => {
      e.preventDefault();

      // const allInputs = form.querySelectorAll(".cs-input");
      // const allErrors = form.querySelectorAll(".cs-error");
      //
      // allInputs.forEach((input) => input.classList.remove("invalid"));
      // allErrors.forEach((error) => (error.textContent = ""));

      hideGlobalMessages();

      // Perform validation
      const validations = [
        validateEmpty(nameInput, "name-error-569", errors.nameRequired),
        validatePhone(phoneInput, "phone-error-569", errors.phoneRequired),
        validateEmail(emailInput, "email-error-569", errors.emailRequired),
        validateWeight(weightInput, "weight-error-569", errors.weightRequired),
        validateDate(
          loadDateInput,
          "date-load-error-569",
          errors.loadingDateRequired,
        ),
        validateDate(
          unloadDateInput,
          "date-unload-error-569",
          errors.unloadingDateRequired,
        ),
        validateDateOrder(loadDateInput, unloadDateInput),
        validateEmpty(
          loadAddressInput,
          "loading-address-error-569",
          errors.loadingAddressRequired,
        ),
        validateEmpty(
          unloadAddressInput,
          "unloading-address-error-569",
          errors.unloadingAddressRequired,
        ),
        validateEmpty(
          goodsDescriptionInput,
          "message-error-569",
          errors.goodsDescriptionRequired,
        ),
      ];

      const isValid = validations.every((v) => v);

      if (!isValid) {
        // Focus first invalid field
        const firstInvalid = form.querySelector(".cs-input.invalid");
        if (firstInvalid) {
          firstInvalid.focus();
        }
        return;
      }

      // const formData = new FormData(form);
      // const object = Object.fromEntries(formData);
      // const json = JSON.stringify(object);

      const formData = new FormData(form);
      const formJSON = JSON.stringify(Object.fromEntries(formData));

      fetch("https://api.web3forms.com/submit", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: formJSON,
      })
        .then(async (response) => {
          if (response.status == 200) {
            spinner.style.display = "none";
            errorComponent.style.display = "none";
            successComponent.style.display = "block";
            form.reset();
            setDateConstraints();
            // propagate success to any listening components (e.g., dialog stepper)
            window.dispatchEvent(new Event("submitSuccess"));
          } else {
            submitButton.style.display = "block";
            errorComponent.style.display = "block";
          }
        })
        .catch(() => {
          errorComponent.style.display = "block";
        });
    });
  });
</script>
