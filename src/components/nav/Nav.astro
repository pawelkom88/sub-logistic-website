---
import { Image } from "astro:assets";
import logo from "../../assets/images/sub-logistics-logo.webp";
import plPL from "../../assets/images/pl-PL.png";
import deDE from "../../assets/images/de-DE.png";
import enGB from "../../assets/images/en-GB.png";
import "./nav.css";
import { type SelectedTranslation } from "../../pages/pl/index.astro";
import { getFlagSrc, getLangCode, type Lang, type LangCode } from "../../utils/utils";

interface Props {
  contact: SelectedTranslation["contact"];
  links: SelectedTranslation["nav"]["links"];
}

function getLangFullName(lang: Lang) {
  switch (lang) {
    case "pl":
      return "Polski";
    case "de":
      return "Deutsch";
    case "en":
      return "English";
  }
}

const languagesConfig = {
  "pl-PL": { flag: plPL, translations: { pl: "Polski", en: "Polish", de: "Polnisch" } },
  "en-GB": {
    flag: enGB,
    translations: { pl: "Angielski", en: "English", de: "Englisch" },
  },
  "de-DE": { flag: deDE, translations: { pl: "Niemiecki", en: "German", de: "Deutsch" } },
};

const currentLang = Astro.url.pathname.split("/")[1] as Lang;

const { contact, links = [] } = Astro.props;
---

<header id="cs-navigation">
  <div class="cs-top-bar">
    <div class="cs-top-container">
      <div class="cs-top-contact">
        <a href="tel:+48510482468" class="cs-top-link">
          <Image
            class="cs-link-icon"
            src="https://csimg.nyc3.cdn.digitaloceanspaces.com/Images/Icons/phone-grey.svg"
            alt="logo"
            width="16"
            height="16"
            aria-hidden="true"
            decoding="async"
          />
          {contact.phone}
        </a>
        <div class="working-hours">
          <Image
            class="cs-link-icon"
            src="https://csimg.nyc3.cdn.digitaloceanspaces.com/Images/Icons/clock-grey.svg"
            alt="logo"
            width="20"
            height="20"
            aria-hidden="true"
            decoding="async"
          />
          {contact.openingTimes}
        </div>
      </div>
      <!-- TODO: dynamically translate based on url -->
      <div class="language-selector" tabindex="0">
        <button id="language-selector-btn" aria-haspopup="listbox" aria-expanded="false">
          <Image
            width="20"
            height="20"
            src={getFlagSrc(getLangCode(currentLang))}
            alt={`${languagesConfig[getLangCode(currentLang)].translations[currentLang]} flag`}
          />
          <p>{getLangFullName(currentLang)}</p>
          <span class="arrow-down"></span>
        </button>
        <ul
          id="language-selector-content"
          class="language-selector-content"
          role="listbox"
          aria-labelledby="language-selector-btn"
        >
          {
            Object.entries(languagesConfig)
              .filter(([lang]) => lang !== getLangCode(currentLang))
              .map(([lang, { translations }]) => {
                return (
                  <li role="option" tabindex="-1" data-lang={lang}>
                    <Image
                      width="20"
                      height="20"
                      src={getFlagSrc(lang as LangCode)}
                      alt={`${translations[currentLang]} flag`}
                    />
                    {translations[currentLang]}
                  </li>
                );
              })
          }
        </ul>
      </div>
    </div>
  </div>
  <div class="cs-container">
    <!--Nav Logo-->
    <a href="/" class="cs-logo" aria-label="back to home">
      <Image
        format={"webp"}
        src={logo}
        alt="sub logistic logo"
        width="261"
        height="152"
      />
    </a>
    <!--Navigation List-->
    <nav class="cs-nav" role="navigation">
      <!--Mobile Nav Toggle-->
      <button class="cs-toggle" aria-label="mobile menu toggle">
        <div class="cs-box" aria-hidden="true">
          <span class="cs-line cs-line1" aria-hidden="true"></span>
          <span class="cs-line cs-line2" aria-hidden="true"></span>
          <span class="cs-line cs-line3" aria-hidden="true"></span>
        </div>
      </button>
      <div class="cs-ul-wrapper">
        <ul id="cs-expanded" class="cs-ul" aria-expanded="false">
          {
            links.map(({ url, name }) => {
              return (
                <li class="cs-li">
                  <a href={`${currentLang}${url}`} class="cs-li-link">
                    {name}
                  </a>
                </li>
              );
            })
          }
        </ul>
      </div>
    </nav>
    <a href="#cs-contact-490" class="cs-button-solid cs-nav-button">Kontakt</a>
  </div>
</header>

<style>
  .language-selector {
    position: relative;
    display: inline-block;
  }

  #language-selector-btn {
    min-width: 7rem;
    background-color: var(--primary);
    border: none;
    border-radius: 5px;
    color: var(--white);
    padding-inline: 0.5rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  #language-selector-btn:hover {
    background-color: var(--hover);
  }

  .arrow-down {
    width: 10px;
    height: 10px;
    border-style: solid;
    border-width: 5px 5px 0 5px;
    border-color: var(--white) transparent transparent transparent;
  }

  .language-selector-content {
    display: none;
    position: absolute;
    left: -0.2rem;
    background-color: var(--white);
    list-style: none;
    margin: 0;
    margin-top: 5px;
    padding: 0;
    box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
    border-radius: 5px;
    z-index: 10;
    min-width: 120px;
  }

  .language-selector-content[aria-hidden="false"] {
    display: block;
  }

  .language-selector-content li {
    padding: 10px;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    gap: 0.5rem;
    cursor: pointer;
  }

  .language-selector-content li:hover,
  .language-selector-content li:focus {
    background-color: var(--hover);
    color: var(--white);
  }
</style>

<script>
  function init() {
    // add classes for mobile navigation toggling
    const CSbody = document.querySelector("body") as HTMLBodyElement;
    const CSnavbarMenu = document.querySelector("#cs-navigation") as HTMLElement;
    const CShamburgerMenu = document.querySelector(
      "#cs-navigation .cs-toggle"
    ) as HTMLElement;
    const logo = document.querySelector(".cs-logo") as HTMLImageElement;

    CShamburgerMenu.addEventListener("click", function () {
      CShamburgerMenu.classList.toggle("cs-active");
      CSnavbarMenu.classList.toggle("cs-active");
      CSbody.classList.toggle("cs-open");
      // run the function to check the aria-expanded value
      ariaExpanded();
    });

    // checks the value of aria expanded on the cs-ul and changes it accordingly whether it is expanded or not
    function ariaExpanded() {
      const csUL = document.querySelector("#cs-expanded");
      const csExpanded = csUL?.getAttribute("aria-expanded");

      if (csExpanded === "false") {
        csUL?.setAttribute("aria-expanded", "true");
      } else {
        csUL?.setAttribute("aria-expanded", "false");
      }
    }

    document.addEventListener("scroll", () => {
      const transition = (logo.style.transition = "all 0.3s ease-in-out");

      const scroll = document.documentElement.scrollTop;
      if (scroll >= 100) {
        document.querySelector("body")?.classList.add("scroll");
        logo.style.height = "clamp(3.6rem, 5.76vw, 3.96rem";
        transition;
      } else {
        document.querySelector("body")?.classList.remove("scroll");
        logo.style.height = "clamp(4.32rem, 6.912vw, 4.752rem)";
        transition;
      }
    });

    // mobile nav toggle code
    const dropDowns = Array.from(
      document.querySelectorAll("#cs-navigation .cs-dropdown")
    );
    for (const item of dropDowns) {
      item.addEventListener("click", () => item.classList.toggle("cs-active"));
    }
  }

  init();
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    type LangCode = "en-GB" | "de-DE" | "pl-PL";

    const dropdownBtn = document.getElementById("language-selector-btn") as HTMLElement;
    const dropdownContent = document.getElementById(
      "language-selector-content"
    ) as HTMLElement;
    const options = dropdownContent?.querySelectorAll("li") as NodeListOf<HTMLElement>;

    function initializeDropdown() {
      // Event listener to toggle dropdown visibility
      dropdownBtn?.addEventListener("click", toggleDropdown);

      // Close dropdown on outside click
      clickOutside();

      // Keyboard navigation
      dropdownBtn?.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
          event.preventDefault();
          toggleDropdown();
          options?.[0].focus();
        }
      });

      options?.forEach((option, index) => {
        option.addEventListener("click", () => {
          const selectedLang = option.getAttribute("data-lang") as LangCode;
          window.location.pathname = `/${selectedLang.split("-")[0]}`;

          dropdownBtn?.setAttribute("aria-expanded", "false");
          dropdownContent?.setAttribute("aria-hidden", "true");
        });

        option.addEventListener("keydown", (event) => {
          if (event.key === "ArrowDown") {
            event.preventDefault();
            if (index < options.length - 1) options[index + 1].focus();
          } else if (event.key === "ArrowUp") {
            event.preventDefault();
            if (index > 0) options[index - 1].focus();
          } else if (event.key === "Enter" || event.key === "Space") {
            event.preventDefault();
            option.click();
          } else if (event.key === "Escape") {
            dropdownBtn?.focus();
            dropdownBtn?.setAttribute("aria-expanded", "false");
            dropdownContent?.setAttribute("aria-hidden", "true");
          }
        });
      });
    }

    function toggleDropdown() {
      const expanded = dropdownBtn.getAttribute("aria-expanded") === "true";
      dropdownBtn.setAttribute("aria-expanded", (!expanded).toString());
      dropdownContent?.setAttribute("aria-hidden", expanded.toString());
    }

    function clickOutside() {
      document.addEventListener("click", (event) => {
        if (
          !dropdownBtn?.contains(event.target as Node) &&
          !dropdownContent?.contains(event.target as Node)
        ) {
          dropdownBtn?.setAttribute("aria-expanded", "false");
          dropdownContent?.setAttribute("aria-hidden", "true");
        }
      });
    }

    initializeDropdown();
  });
</script>
