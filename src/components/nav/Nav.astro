---
import { Image } from "astro:assets";
import logo from "../../assets/images/sub-logistics-logo.webp";
import "./nav.css";
import {
  getFlagSrc,
  getLangCode,
  getLangFullName,
  languagesConfig,
  translateAriaLabel,
  type LangCode,
  type SelectedTranslation,
  getCountryCode,
  getHref,
} from "../../utils/utils";

interface Props {
  contactBtn?: SelectedTranslation["contactBtn"] | undefined;
  contact?: SelectedTranslation["contact"] | undefined;
  links?: SelectedTranslation["nav"]["links"] | undefined;
}

const currentLang = getCountryCode(Astro.url.pathname);
const { contactBtn, contact, links = [] } = Astro.props;
---

<header id="cs-navigation">
  <div class="cs-top-bar">
    <div class="cs-top-container">
      <div class="cs-top-contact">
        <a href="tel:+48510482468" class="cs-top-link">
          <svg width="16" height="17" viewBox="0 0 16 17" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12.96 9.16667C12.8133 9.16667 12.66 9.12 12.5133 9.08667C12.2163 9.02122 11.9245 8.93432 11.64 8.82667C11.3307 8.71415 10.9908 8.71999 10.6855 8.84307C10.3803 8.96614 10.1314 9.19776 9.98667 9.49333L9.84001 9.79333C9.19067 9.43212 8.594 8.98349 8.06667 8.46C7.54319 7.93268 7.09455 7.336 6.73334 6.68667L7.01334 6.5C7.30892 6.35528 7.54053 6.10635 7.6636 5.80113C7.78668 5.4959 7.79252 5.15594 7.68001 4.84667C7.57415 4.56161 7.4873 4.26986 7.42001 3.97333C7.38667 3.82667 7.36001 3.67333 7.34001 3.52C7.25905 3.05041 7.01309 2.62516 6.64642 2.32082C6.27975 2.01649 5.81647 1.85307 5.34001 1.86H3.34001C3.05269 1.8573 2.76817 1.91654 2.50581 2.03369C2.24345 2.15083 2.00941 2.32313 1.81963 2.53885C1.62984 2.75458 1.48876 3.00866 1.406 3.28381C1.32323 3.55895 1.30073 3.8487 1.34001 4.13333C1.69516 6.92625 2.97069 9.52125 4.96511 11.5084C6.95952 13.4956 9.55915 14.7617 12.3533 15.1067H12.6067C13.0983 15.1074 13.5729 14.927 13.94 14.6C14.1509 14.4114 14.3194 14.1801 14.4343 13.9215C14.5492 13.663 14.608 13.383 14.6067 13.1V11.1C14.5985 10.6369 14.4299 10.191 14.1296 9.83844C13.8293 9.48585 13.4159 9.24842 12.96 9.16667V9.16667ZM13.2933 13.1667C13.2932 13.2613 13.2729 13.3549 13.2339 13.4411C13.1948 13.5273 13.1378 13.6042 13.0667 13.6667C12.9924 13.7313 12.9053 13.7796 12.8111 13.8083C12.7169 13.837 12.6177 13.8456 12.52 13.8333C10.0233 13.5132 7.70416 12.371 5.92848 10.5869C4.1528 8.80273 3.02161 6.47822 2.71334 3.98C2.70273 3.88234 2.71203 3.78355 2.74067 3.68959C2.76932 3.59563 2.81672 3.50846 2.88001 3.43333C2.94248 3.36222 3.01938 3.30523 3.10559 3.26614C3.1918 3.22706 3.28535 3.20679 3.38001 3.20667H5.38001C5.53504 3.20322 5.68642 3.25392 5.8081 3.35005C5.92978 3.44617 6.01415 3.58171 6.04667 3.73333C6.07334 3.91555 6.10667 4.09555 6.14667 4.27333C6.22369 4.62476 6.32618 4.97012 6.45334 5.30667L5.52001 5.74C5.4402 5.77661 5.36842 5.82863 5.30878 5.89306C5.24913 5.9575 5.20281 6.03307 5.17245 6.11546C5.1421 6.19785 5.12832 6.28542 5.1319 6.37315C5.13549 6.46087 5.15637 6.54703 5.19334 6.62666C6.15281 8.68184 7.80484 10.3339 9.86001 11.2933C10.0223 11.36 10.2044 11.36 10.3667 11.2933C10.4498 11.2636 10.5262 11.2176 10.5915 11.1581C10.6567 11.0986 10.7094 11.0267 10.7467 10.9467L11.16 10.0133C11.5047 10.1366 11.8564 10.239 12.2133 10.32C12.3911 10.36 12.5711 10.3933 12.7533 10.42C12.905 10.4525 13.0405 10.5369 13.1366 10.6586C13.2328 10.7802 13.2835 10.9316 13.28 11.0867L13.2933 13.1667Z" fill="#4E4B66"/>
          </svg>
          {contact?.phone}
        </a>
        <div class="working-hours">
          <svg width="16" height="17" viewBox="0 0 16 17" fill="none" xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#clip0_1_106)">
              <path d="M10.8505 9.91285L8.61965 8.23972V4.83153C8.61965 4.48885 8.34265 4.21185 7.99997 4.21185C7.65728 4.21185 7.38028 4.48885 7.38028 4.83153V8.5496C7.38028 8.74478 7.472 8.92885 7.62815 9.04535L10.1068 10.9044C10.2184 10.988 10.3485 11.0283 10.478 11.0283C10.667 11.0283 10.8529 10.9434 10.9744 10.7798C11.1802 10.5065 11.1244 10.118 10.8505 9.91285Z" fill="#4E4B66"/>
              <path d="M8 0.5C3.58853 0.5 0 4.08853 0 8.5C0 12.9115 3.58853 16.5 8 16.5C12.4115 16.5 16 12.9115 16 8.5C16 4.08853 12.4115 0.5 8 0.5ZM8 15.2607C4.27266 15.2607 1.23934 12.2273 1.23934 8.5C1.23934 4.77266 4.27266 1.73934 8 1.73934C11.728 1.73934 14.7607 4.77266 14.7607 8.5C14.7607 12.2273 11.7273 15.2607 8 15.2607Z" fill="#4E4B66"/>
            </g>
            <defs>
              <clipPath id="clip0_1_106">
                <rect width="16" height="16" fill="white" transform="translate(0 0.5)"/>
              </clipPath>
            </defs>
          </svg>

          {contact?.openingTimes}
        </div>
      </div>
      <div
        class="language-selector"
        tabindex="-1"
        aria-label={translateAriaLabel(currentLang)}
      >
        <button
          id="language-selector-btn"
          aria-haspopup="listbox"
          aria-expanded="false"
        >
          <Image
            aria-hidden="true"
            width="20"
            height="20"
            src={getFlagSrc(getLangCode(currentLang))}
            alt={`${languagesConfig[getLangCode(currentLang)].translations[currentLang]} flag`}
          />
          <span style="display: block; padding: 10px 0;" aria-hidden="true">{getLangFullName(currentLang)}</span>
          <span class="arrow-down"></span>
        </button>
        <ul
          id="language-selector-content"
          class="language-selector-content"
          role="listbox"
          aria-labelledby="language-selector-btn"
        >
          {
            Object.entries(languagesConfig)
              .filter(([lang]) => lang !== getLangCode(currentLang))
              .map(([lang, { translations }]) => {
                return (
                  <li
                    aria-label={translations[currentLang]}
                    role="option"
                    tabindex="-1"
                    data-lang={lang}
                  >
                    <Image
                      alt={`${translations[currentLang]} flag`}
                      loading="eager"
                      aria-hidden="true"
                      width="20"
                      height="20"
                      src={getFlagSrc(lang as LangCode)}
                    />
                    {translations[currentLang]}
                  </li>
                );
              })
          }
        </ul>
      </div>
    </div>
  </div>
  <div class="cs-container">
    <a
      href={getHref(currentLang, "/")}
      class="cs-logo"
      aria-label="back to home"
    >
      <Image
        loading="eager"
        format={"webp"}
        src={logo}
        alt="sub logistic logo"
        width="261"
        height="152"
      />
    </a>
    <nav class="cs-nav">
      <button class="cs-toggle" aria-label="mobile menu toggle">
        <span class="cs-box" aria-hidden="true">
          <span class="cs-line cs-line1" aria-hidden="true"></span>
          <span class="cs-line cs-line2" aria-hidden="true"></span>
          <span class="cs-line cs-line3" aria-hidden="true"></span>
        </span>
      </button>
      <div class="cs-ul-wrapper">
        <ul id="cs-expanded" class="cs-ul" aria-expanded="false">
          {
            links?.map(({ url, name }) => {
              // const href = url.startsWith("/") ? `/${currentLang}${url}` : url;
              return (
                <li class="cs-li">
                  <a href={getHref(currentLang, url)} class="cs-li-link">
                    {name}
                  </a>
                </li>
              );
            })
          }
        </ul>
      </div>
    </nav>
    <a href={getHref(currentLang, "/#cs-contact-490")} class="cs-button-solid cs-nav-button"
      >{contactBtn}</a
    >
  </div>
</header>

<script>
  function init() {
    // add classes for mobile navigation toggling
    const CSbody = document.querySelector("body") as HTMLBodyElement;
    const CSnavbarMenu = document.querySelector(
      "#cs-navigation",
    ) as HTMLElement;
    const CShamburgerMenu = document.querySelector(
      "#cs-navigation .cs-toggle",
    ) as HTMLElement;
    const logo = document.querySelector(".cs-logo") as HTMLImageElement;

    CShamburgerMenu.addEventListener("click", function () {
      CShamburgerMenu.classList.toggle("cs-active");
      CSnavbarMenu.classList.toggle("cs-active");
      CSbody.classList.toggle("cs-open");
      // run the function to check the aria-expanded value
      ariaExpanded();
    });

    // checks the value of aria expanded on the cs-ul and changes it accordingly whether it is expanded or not
    function ariaExpanded() {
      const csUL = document.querySelector("#cs-expanded");
      const csExpanded = csUL?.getAttribute("aria-expanded");

      if (csExpanded === "false") {
        csUL?.setAttribute("aria-expanded", "true");
      } else {
        csUL?.setAttribute("aria-expanded", "false");
      }
    }

    document.addEventListener("scroll", () => {
      const transition = (logo.style.transition = "all 0.3s ease-in-out");

      const scroll = document.documentElement.scrollTop;
      if (scroll >= 100) {
        document.querySelector("body")?.classList.add("scroll");
        logo.style.height = "clamp(3.6rem, 5.76vw, 3.96rem";
        transition;
      } else {
        document.querySelector("body")?.classList.remove("scroll");
        logo.style.height = "clamp(4.32rem, 6.912vw, 4.752rem)";
        transition;
      }
    });

    // mobile nav toggle code
    const dropDowns = Array.from(
      document.querySelectorAll("#cs-navigation .cs-dropdown"),
    );
    for (const item of dropDowns) {
      item.addEventListener("click", () => item.classList.toggle("cs-active"));
    }
  }

  init();
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    type LangCode = "en-GB" | "de-DE" | "pl-PL";

    const dropdownBtn = document.getElementById(
      "language-selector-btn",
    ) as HTMLButtonElement;
    const dropdownContent = document.getElementById(
      "language-selector-content",
    ) as HTMLElement;
    const options = dropdownContent?.querySelectorAll(
      "li",
    ) as NodeListOf<HTMLElement>;

    function initializeDropdown() {
      // Event listener to toggle dropdown visibility
      dropdownBtn?.addEventListener("click", toggleDropdown);

      // Close dropdown on outside click
      clickOutside();

      // Keyboard navigation
      dropdownBtn?.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
          event.preventDefault();
          toggleDropdown();
          options?.[0].focus();
        }
      });

      options?.forEach((option, index) => {
        option.addEventListener("click", () => {
          const selectedLangCode = option.getAttribute("data-lang") as LangCode;
          const selectedLang = selectedLangCode.split("-")[0] as "en" | "de" | "pl";

          // Preserve current path, query string, and hash.
          const url = new URL(window.location.href);
          const segments = url.pathname.split("/"); // e.g. ["", "en", "get-quote"]

          // Known localized slug mappings (top-level pages)
          const slugMap: Record<string, { en: string; de: string; pl: string }> = {
            // About us
            "about-us": { en: "about-us", de: "ueber-uns", pl: "onas" },
            "ueber-uns": { en: "about-us", de: "ueber-uns", pl: "onas" },
            "onas": { en: "about-us", de: "ueber-uns", pl: "onas" },
            // Offer / Services
            "services": { en: "services", de: "leistungen", pl: "oferta" },
            "leistungen": { en: "services", de: "leistungen", pl: "oferta" },
            "oferta": { en: "services", de: "leistungen", pl: "oferta" },
            // Get a quote
            "get-quote": { en: "get-quote", de: "angebot-anfordern", pl: "uzyskaj-wycene" },
            "angebot-anfordern": { en: "get-quote", de: "angebot-anfordern", pl: "uzyskaj-wycene" },
            "uzyskaj-wycene": { en: "get-quote", de: "angebot-anfordern", pl: "uzyskaj-wycene" },
            // Privacy / Terms (mapped to closest existing page)
            "terms-of-use": { en: "terms-of-use", de: "datenschutz", pl: "polityka-prywatnosci" },
            "datenschutz": { en: "terms-of-use", de: "datenschutz", pl: "polityka-prywatnosci" },
            "polityka-prywatnosci": { en: "terms-of-use", de: "datenschutz", pl: "polityka-prywatnosci" },
          };

          // Replace or insert locale segment
          if (["en", "de", "pl"].includes(segments[1])) {
            segments[1] = selectedLang; // replace existing locale
          } else {
            segments.splice(1, 0, selectedLang); // insert locale if missing
          }

          // Try to map slug between locales (only for top-level pages)
          if (segments.length >= 3 && segments[2]) {
            const currentSlug = segments[2];
            const mapped = slugMap[currentSlug]?.[selectedLang];
            if (mapped) {
              segments[2] = mapped; // replace slug with localized equivalent
            } else {
              // If the slug doesn't exist in target locale, optionally fallback to locale root
              // segments = ["", selectedLang];
              // Keep original slug by default; if it 404s, routing will handle NotFound
            }
          }

          url.pathname = segments.join("/");
          window.location.href = url.toString();

          dropdownBtn?.setAttribute("aria-expanded", "false");
          dropdownContent?.setAttribute("aria-hidden", "true");
        });

        option.addEventListener("keydown", (event) => {
          if (event.key === "ArrowDown") {
            event.preventDefault();
            if (index < options.length - 1) options[index + 1].focus();
          } else if (event.key === "ArrowUp") {
            event.preventDefault();
            if (index > 0) options[index - 1].focus();
          } else if (event.key === "Enter" || event.key === "Space") {
            event.preventDefault();
            option.click();
          } else if (event.key === "Escape") {
            dropdownBtn?.focus();
            dropdownBtn?.setAttribute("aria-expanded", "false");
            dropdownContent?.setAttribute("aria-hidden", "true");
          }
        });
      });
    }

    function toggleDropdown() {
      const expanded = dropdownBtn.getAttribute("aria-expanded") === "true";
      dropdownBtn.setAttribute("aria-expanded", (!expanded).toString());
      dropdownContent?.setAttribute("aria-hidden", expanded.toString());
    }

    function clickOutside() {
      document.addEventListener("click", (event) => {
        if (
          !dropdownBtn?.contains(event.target as Node) &&
          !dropdownContent?.contains(event.target as Node)
        ) {
          dropdownBtn?.setAttribute("aria-expanded", "false");
          dropdownContent?.setAttribute("aria-hidden", "true");
        }
      });
    }

    initializeDropdown();
  });
</script>
