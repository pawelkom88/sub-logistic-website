---
import { Image } from "astro:assets";
import logo from "../../assets/images/sub-logistics-logo.webp";
import "./nav.css";
import {
  getFlagSrc,
  getLangCode,
  getLangFullName,
  languagesConfig,
  translateAriaLabel,
  type LangCode,
  type SelectedTranslation,
  getCountryCode,
  getHref,
} from "../../utils/utils";

interface Props {
  contactBtn?: SelectedTranslation["contactBtn"] | undefined;
  contact?: SelectedTranslation["contact"] | undefined;
  links?: SelectedTranslation["nav"]["links"] | undefined;
}

const currentLang = getCountryCode(Astro.url.pathname);
const { contactBtn, contact, links = [] } = Astro.props;
---

<header id="cs-navigation">
  <div class="cs-top-bar">
    <div class="cs-top-container">
      <div class="cs-top-contact">
        <a href="tel:+48510482468" class="cs-top-link">
          <Image
            loading="eager"
            class="cs-link-icon"
            src="https://csimg.nyc3.cdn.digitaloceanspaces.com/Images/Icons/phone-grey.svg"
            alt="logo"
            width="16"
            height="16"
            aria-hidden="true"
          />
          {contact?.phone}
        </a>
        <div class="working-hours">
          <Image
            loading="eager"
            class="cs-link-icon"
            src="https://csimg.nyc3.cdn.digitaloceanspaces.com/Images/Icons/clock-grey.svg"
            alt="logo"
            width="20"
            height="20"
            aria-hidden="true"
          />
          {contact?.openingTimes}
        </div>
      </div>
      <div
        class="language-selector"
        tabindex="-1"
        aria-label={translateAriaLabel(currentLang)}
      >
        <button
          id="language-selector-btn"
          aria-haspopup="listbox"
          aria-expanded="false"
        >
          <Image
            aria-hidden="true"
            width="20"
            height="20"
            src={getFlagSrc(getLangCode(currentLang))}
            alt={`${languagesConfig[getLangCode(currentLang)].translations[currentLang]} flag`}
          />
          <p aria-hidden="true">{getLangFullName(currentLang)}</p>
          <span class="arrow-down"></span>
        </button>
        <ul
          id="language-selector-content"
          class="language-selector-content"
          role="listbox"
          aria-labelledby="language-selector-btn"
        >
          {
            Object.entries(languagesConfig)
              .filter(([lang]) => lang !== getLangCode(currentLang))
              .map(([lang, { translations }]) => {
                return (
                  <li
                    aria-label={translations[currentLang]}
                    role="option"
                    tabindex="-1"
                    data-lang={lang}
                  >
                    <Image
                      alt={`${translations[currentLang]} flag`}
                      loading="eager"
                      aria-hidden="true"
                      width="20"
                      height="20"
                      src={getFlagSrc(lang as LangCode)}
                    />
                    {translations[currentLang]}
                  </li>
                );
              })
          }
        </ul>
      </div>
    </div>
  </div>
  <div class="cs-container">
    <a
      href={getHref(currentLang, "/")}
      class="cs-logo"
      aria-label="back to home"
    >
      <Image
        loading="eager"
        format={"webp"}
        src={logo}
        alt="sub logistic logo"
        width="261"
        height="152"
      />
    </a>
    <nav class="cs-nav" role="navigation">
      <button class="cs-toggle" aria-label="mobile menu toggle">
        <div class="cs-box" aria-hidden="true">
          <span class="cs-line cs-line1" aria-hidden="true"></span>
          <span class="cs-line cs-line2" aria-hidden="true"></span>
          <span class="cs-line cs-line3" aria-hidden="true"></span>
        </div>
      </button>
      <div class="cs-ul-wrapper">
        <ul id="cs-expanded" class="cs-ul" aria-expanded="false">
          {
            links?.map(({ url, name }) => {
              // const href = url.startsWith("/") ? `/${currentLang}${url}` : url;
              return (
                <li class="cs-li">
                  <a href={getHref(currentLang, url)} class="cs-li-link">
                    {name}
                  </a>
                </li>
              );
            })
          }
        </ul>
      </div>
    </nav>
    <!-- TODO: add contact translation -->
    <a href="#cs-contact-490" class="cs-button-solid cs-nav-button"
      >{contactBtn}</a
    >
  </div>
</header>

<script>
  function init() {
    // add classes for mobile navigation toggling
    const CSbody = document.querySelector("body") as HTMLBodyElement;
    const CSnavbarMenu = document.querySelector(
      "#cs-navigation",
    ) as HTMLElement;
    const CShamburgerMenu = document.querySelector(
      "#cs-navigation .cs-toggle",
    ) as HTMLElement;
    const logo = document.querySelector(".cs-logo") as HTMLImageElement;

    CShamburgerMenu.addEventListener("click", function () {
      CShamburgerMenu.classList.toggle("cs-active");
      CSnavbarMenu.classList.toggle("cs-active");
      CSbody.classList.toggle("cs-open");
      // run the function to check the aria-expanded value
      ariaExpanded();
    });

    // checks the value of aria expanded on the cs-ul and changes it accordingly whether it is expanded or not
    function ariaExpanded() {
      const csUL = document.querySelector("#cs-expanded");
      const csExpanded = csUL?.getAttribute("aria-expanded");

      if (csExpanded === "false") {
        csUL?.setAttribute("aria-expanded", "true");
      } else {
        csUL?.setAttribute("aria-expanded", "false");
      }
    }

    document.addEventListener("scroll", () => {
      const transition = (logo.style.transition = "all 0.3s ease-in-out");

      const scroll = document.documentElement.scrollTop;
      if (scroll >= 100) {
        document.querySelector("body")?.classList.add("scroll");
        logo.style.height = "clamp(3.6rem, 5.76vw, 3.96rem";
        transition;
      } else {
        document.querySelector("body")?.classList.remove("scroll");
        logo.style.height = "clamp(4.32rem, 6.912vw, 4.752rem)";
        transition;
      }
    });

    // mobile nav toggle code
    const dropDowns = Array.from(
      document.querySelectorAll("#cs-navigation .cs-dropdown"),
    );
    for (const item of dropDowns) {
      item.addEventListener("click", () => item.classList.toggle("cs-active"));
    }
  }

  init();
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    type LangCode = "en-GB" | "de-DE" | "pl-PL";

    const dropdownBtn = document.getElementById(
      "language-selector-btn",
    ) as HTMLButtonElement;
    const dropdownContent = document.getElementById(
      "language-selector-content",
    ) as HTMLElement;
    const options = dropdownContent?.querySelectorAll(
      "li",
    ) as NodeListOf<HTMLElement>;

    function initializeDropdown() {
      // Event listener to toggle dropdown visibility
      dropdownBtn?.addEventListener("click", toggleDropdown);

      // Close dropdown on outside click
      clickOutside();

      // Keyboard navigation
      dropdownBtn?.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
          event.preventDefault();
          toggleDropdown();
          options?.[0].focus();
        }
      });

      options?.forEach((option, index) => {
        option.addEventListener("click", () => {
          const selectedLangCode = option.getAttribute("data-lang") as LangCode;
          const selectedLang = selectedLangCode.split("-")[0] as "en" | "de" | "pl";

          // Preserve current path, query string, and hash.
          const url = new URL(window.location.href);
          const segments = url.pathname.split("/"); // e.g. ["", "en", "get-quote"]

          // Known localized slug mappings (top-level pages)
          const slugMap: Record<string, { en: string; de: string; pl: string }> = {
            // About us
            "about-us": { en: "about-us", de: "ueber-uns", pl: "onas" },
            "ueber-uns": { en: "about-us", de: "ueber-uns", pl: "onas" },
            "onas": { en: "about-us", de: "ueber-uns", pl: "onas" },
            // Offer / Services
            "services": { en: "services", de: "leistungen", pl: "oferta" },
            "leistungen": { en: "services", de: "leistungen", pl: "oferta" },
            "oferta": { en: "services", de: "leistungen", pl: "oferta" },
            // Get a quote
            "get-quote": { en: "get-quote", de: "angebot-anfordern", pl: "uzyskaj-wycene" },
            "angebot-anfordern": { en: "get-quote", de: "angebot-anfordern", pl: "uzyskaj-wycene" },
            "uzyskaj-wycene": { en: "get-quote", de: "angebot-anfordern", pl: "uzyskaj-wycene" },
            // Privacy / Terms (mapped to closest existing page)
            "terms-of-use": { en: "terms-of-use", de: "datenschutz", pl: "polityka-prywatnosci" },
            "datenschutz": { en: "terms-of-use", de: "datenschutz", pl: "polityka-prywatnosci" },
            "polityka-prywatnosci": { en: "terms-of-use", de: "datenschutz", pl: "polityka-prywatnosci" },
          };

          // Replace or insert locale segment
          if (["en", "de", "pl"].includes(segments[1])) {
            segments[1] = selectedLang; // replace existing locale
          } else {
            segments.splice(1, 0, selectedLang); // insert locale if missing
          }

          // Try to map slug between locales (only for top-level pages)
          if (segments.length >= 3 && segments[2]) {
            const currentSlug = segments[2];
            const mapped = slugMap[currentSlug]?.[selectedLang];
            if (mapped) {
              segments[2] = mapped; // replace slug with localized equivalent
            } else {
              // If the slug doesn't exist in target locale, optionally fallback to locale root
              // segments = ["", selectedLang];
              // Keep original slug by default; if it 404s, routing will handle NotFound
            }
          }

          url.pathname = segments.join("/");
          window.location.href = url.toString();

          dropdownBtn?.setAttribute("aria-expanded", "false");
          dropdownContent?.setAttribute("aria-hidden", "true");
        });

        option.addEventListener("keydown", (event) => {
          if (event.key === "ArrowDown") {
            event.preventDefault();
            if (index < options.length - 1) options[index + 1].focus();
          } else if (event.key === "ArrowUp") {
            event.preventDefault();
            if (index > 0) options[index - 1].focus();
          } else if (event.key === "Enter" || event.key === "Space") {
            event.preventDefault();
            option.click();
          } else if (event.key === "Escape") {
            dropdownBtn?.focus();
            dropdownBtn?.setAttribute("aria-expanded", "false");
            dropdownContent?.setAttribute("aria-hidden", "true");
          }
        });
      });
    }

    function toggleDropdown() {
      const expanded = dropdownBtn.getAttribute("aria-expanded") === "true";
      dropdownBtn.setAttribute("aria-expanded", (!expanded).toString());
      dropdownContent?.setAttribute("aria-hidden", expanded.toString());
    }

    function clickOutside() {
      document.addEventListener("click", (event) => {
        if (
          !dropdownBtn?.contains(event.target as Node) &&
          !dropdownContent?.contains(event.target as Node)
        ) {
          dropdownBtn?.setAttribute("aria-expanded", "false");
          dropdownContent?.setAttribute("aria-hidden", "true");
        }
      });
    }

    initializeDropdown();
  });
</script>
