---
import { getCountryCode, getHref, type Lang, type SelectedTranslation } from "../../utils/utils";
import "../contact-form/contact-form.css";
interface Props {
  form?: SelectedTranslation["contactForm"] | undefined;
  contact?: SelectedTranslation["contact"] | undefined;
}

const currentLang = Astro.url.pathname.split("/")[1] as Lang;

const { form, contact } = Astro.props;

export const googleMapsLink =
  "https://www.google.pl/maps/place/Marynarki+Polskiej+136A%2F47,+80-865+Gda%C5%84sk/@54.3787535,18.6284272,17z/data=!3m1!4b1!4m5!3m4!1s0x46fd74a1ec7664fb:0x4a47f05d5bd9227a!8m2!3d54.3787535!4d18.6310021?entry=ttu";

const url = new URL(Astro.url);
const lang = getCountryCode(Astro.url.pathname);
---

<section id="cs-contact-490">
  <div class="cs-container">
    <!-- Contact Info -->
    <div class="cs-content">
      <span class="cs-topper">
        {form?.topper}
      </span>
      <h2 class="cs-title">{form?.heading}</h2>
      <p class="cs-text">
        {form?.description}
      </p>

      <!--Address-->
      <div class="cs-address">
        <span class="cs-header">{form?.contactLabels.address}</span>
        <a
          href={googleMapsLink}
          class="cs-link"
          target="_blank"
          rel="noopener noreferrer"
        >
          {contact?.address}
        </a>
        <span aria-hidden="true" class="cs-tooltip"
          >{form?.contactLabels.tooltip}</span
        >
      </div>
      <br />
      <!--Email-->
      <span class="cs-header">{form?.contactLabels.email}</span>
      <a href=`mailto:${contact?.email}` class="cs-link">{contact?.email}</a>

      <!--Phone-->
      <span class="cs-header">{form?.contactLabels.phone}</span>
      <a href=`tel:${contact?.phone}` class="cs-link">{contact?.phone}</a>
    </div>
    <!-- Form -->
    <!-- TODO: check docs -->
    <form id="cs-form-490" name="Contact Form" method="post">
      <!-- HIDDEN -->
      <input
        type="hidden"
        name="apikey"
        value="e63617a1-6b8c-4a8f-adf8-03aba92d5110"
      />
      <input
        type="checkbox"
        name="botcheck"
        class="hidden"
        style="display: none;"
      />
      <input type="hidden" name="subject" value="Nowa wiadomość ze strony" />
      <!-- HIDDEN -->
      <label for="name-490" class="cs-label">
        {form?.formFields.name.label}
        <input
          class="cs-input"
          required="required"
          type="text"
          id="name-490"
          name="name"
          placeholder={form?.formFields.name.placeholder}
          autocomplete="given-name"
        />
      </label>
      <label for="email-490" class="cs-label">
        {form?.formFields.email.label}
        <input
          class="cs-input"
          required
          type="email"
          id="email-490"
          name="email"
          placeholder={form?.formFields.email.placeholder}
          pattern="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
          title="Please enter a valid email address (e.g., user@example.com)"
          autocomplete="email"
          oninput="this.setCustomValidity('')"
          oninvalid="this.setCustomValidity('Please enter a valid email address')"
        />
      </label>
      <label for="phone-490" class="cs-label">
        {form?.formFields.phone.label}
        <input
          class="cs-input"
          required
          pattern="(?<!\w)(\(?(\+|00)?48\)?)?[ -]?\d{3}[ -]?\d{3}[ -]?\d{3}(?!\w)"
          type="tel"
          id="phone-490"
          name="phone"
          placeholder="np. 0621345123"
          autocomplete="tel"
          minlength="9"
        />
      </label>
      <label for="message-490" class="cs-label -label-message">
        {form?.formFields.message.label}
        <textarea
          class="cs-input"
          required
          name="Message"
          id="message-490"
          placeholder={form?.formFields.message.placeholder}></textarea>
      </label>
      <div class="cs-label cs-span-2">
        <label for="agreement">
          {form?.formFields.checkbox.label}
          <a href={getHref(currentLang, form?.formFields.checkbox.policyLink || "")}
            >{form?.formFields.checkbox.label2}</a
          >
          <input
            class="cs-checkbox"
            type="checkbox"
            id="agreement"
            name="Polityka prywatności"
            required
          />
        </label>
      </div>
      <br />
      <!-- Add hCaptcha -->
      <!--todo: get value based on selected lang-->
        <div
          class="h-captcha"
          data-captcha="true"
          data-lang={lang}
          data-size="compact"
        >
        </div>
        <br />
        <button type="submit" class="cs-button-solid submit-btn"
          >{form?.formFields.submitBtn}</button
        >
      <div class="lds-spinner"></div>

      <!--translate !-->
      <div class="success-component" style="display: none;">
        Wiadomość została wysłana pomyślnie!
      </div>
      <div class="error-component" style="display: none;">
        Weryfikacja hCaptcha jest wymagana, aby zapewnić bezpieczeństwo. Prosimy
        o jej zaznaczenie.
      </div>
    </form>
  </div>
</section>

<script>
  const tooltip = document.querySelector(".cs-tooltip") as HTMLElement;
  const address = document.querySelector(".cs-address .cs-link") as HTMLElement;

  address?.addEventListener("mouseover", () => {
    tooltip.style.opacity = "1";
    tooltip.style.transform = "translateY(0)";
    tooltip.style.transition = "all 0.3s ease-in-out";
  });
  address?.addEventListener("mouseout", () => {
    tooltip.style.opacity = "0";
    tooltip.style.transform = "translateY(10px)";
    tooltip.style.transition = "all 0.3s ease-in-out";
  });
</script>

<script>
  function h() {
    document.addEventListener("DOMContentLoaded", function () {
      const spinner = document.querySelector(".lds-spinner") as HTMLElement;
      const successComponent = document.querySelector(
        ".success-component",
      ) as HTMLElement;
      const errorComponent = document.querySelector(
        ".error-component",
      ) as HTMLElement;
      const submitButton = document.querySelector(".submit-btn") as HTMLElement;
      const contactForm = document.getElementById(
        "cs-form-490",
      ) as HTMLFormElement;
      const nameInput = document.getElementById("name-490") as HTMLInputElement;
      const emailInput = document.getElementById(
        "email-490",
      ) as HTMLInputElement;
      const phoneInput = document.getElementById(
        "phone-490",
      ) as HTMLInputElement;
      const messageInput = document.getElementById(
        "message-490",
      ) as HTMLTextAreaElement;
      const agreementInput = document.getElementById(
        "agreement",
      ) as HTMLInputElement;
      spinner.style.display = "none";
      successComponent.style.display = "none";
      errorComponent.style.display = "none";

      function hideGlobalMessages() {
        if (successComponent) successComponent.style.display = "none";
        if (errorComponent) errorComponent.style.display = "none";
      }

      // Hide success/error banners on any field change
      nameInput?.addEventListener("input", hideGlobalMessages);
      emailInput?.addEventListener("input", hideGlobalMessages);
      phoneInput?.addEventListener("input", hideGlobalMessages);
      messageInput?.addEventListener("input", hideGlobalMessages);
      agreementInput?.addEventListener("change", hideGlobalMessages);

      contactForm.addEventListener("submit", function (event) {
        event.preventDefault();
        hideGlobalMessages();

        const formData = new FormData(contactForm);
        const formJSON = JSON.stringify(Object.fromEntries(formData));

        spinner.style.display = "block";
        submitButton.style.display = "none";

        fetch("https://api.web3forms.com/submit", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: formJSON,
        })
          .then(async (response) => {
            console.log(response, "asd");
            if (response.status == 200) {
              spinner.style.display = "none";
              errorComponent.style.display = "none";
              successComponent.style.display = "block";
              // notify any listeners (e.g., dialog) that submission succeeded
              window.dispatchEvent(new Event("submitSuccess"));
            } else {
              submitButton.style.display = "block";
              errorComponent.style.display = "block";
            }
          })
          .catch(() => {
            errorComponent.style.display = "block";
          });
      });
    });
  }

  h();
</script>

<script>
  (function lazyLoadWeb3Forms() {
    const target = document.getElementById('cs-contact-490');
    if (!target) return;

    let loaded = false;
    const load = () => {
      if (loaded) return;
      loaded = true;
      const s = document.createElement('script');
      s.src = 'https://web3forms.com/client/script.js';
      s.async = true;
      s.defer = true;
      document.head.appendChild(s);
    };

    const io = new IntersectionObserver(
      (entries) => {
        if (entries.some((e) => e.isIntersecting)) {
          load();
          io.disconnect();
        }
      },
      { rootMargin: '200px' }
    );
    io.observe(target);

    target.addEventListener('pointerdown', load, { once: true });
  })();
</script>
